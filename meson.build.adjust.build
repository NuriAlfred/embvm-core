project('Embedded Virtual Machine',
	['cpp', 'c'],
	default_options : [
		# `build.*` options affect `native: true targets`
		# plain options affect `native: false` targets.
		'cpp_std=c++17', 'build.cpp_std=c++17',
		'c_std=c11', 'build.c_std=c11',
		'default_library=static',
		'b_staticpic=true',
		'b_lto=false',
		'optimization=2',
	],
	license: 'Proprietary',
	meson_version: '>=0.51.0',
	version: '0.9'
)

######################################
# Import compiler flags and warnings #
######################################

# Pick up build architecture for doxygen
subdir('build/architecture')
message('Building framework for host architecture: ' + target_architecture)
message('Native applications will be built for architecture: ' + native_architecture)

# Get compiler flags, and handle host vs cross builds
subdir('build/compiler')

# compiler_args and linker_args is defined in build/compiler/<target>/meson.build
add_global_arguments(native_compiler_args, language: ['c', 'cpp'], native: true)
add_global_arguments(target_compiler_args, language: ['c','cpp'], native: false)
add_global_arguments(native_cpp_compiler_args, language: 'cpp', native: true)
add_global_arguments(target_cpp_compiler_args, language: 'cpp', native: false)
add_global_link_arguments(native_linker_args, language: 'cpp', native: true)
add_global_link_arguments(target_linker_args, language: 'cpp', native: false)
add_project_arguments(native_compiler_warnings, language: ['c', 'cpp'], native: true)
add_project_arguments(target_compiler_warnings, language: ['c', 'cpp'], native: false)
add_project_arguments(native_cpp_compiler_warnings, language: 'cpp', native: true)
add_project_arguments(target_cpp_compiler_warnings, language: 'cpp', native: false)

if meson.is_cross_build()
	target_compiler = meson.get_compiler('cpp', native: false)
	if target_compiler.get_id() == 'gcc' and target_compiler.version().version_compare('<9.0') and target_architecture == 'arm'
		error('This project requires gcc-arm-none-eabi v9.0 or later. See README.md for more information.')
	endif
endif

#########################
# Process Build Options #
#########################

disable_rtti = get_option('disable-rtti')
enable_threading = get_option('enable-threading')
disable_exceptions = get_option('disable-exceptions')
enable_werror = get_option('enable-werror')
enable_pedantic_error = get_option('enable-pedantic-error')
enable_pedantic = get_option('enable-pedantic')
always_enable_assert = get_option('always-enable-assert')
debug_build = get_option('debug')

if always_enable_assert == true
	message('assert() is enabled')
	add_project_arguments('-UNDEBUG', language : ['cpp'], native: true)
	add_project_arguments('-UNDEBUG', language : ['cpp'], native: false)
else
	if debug_build
		message('assert() is enabled')
		add_project_arguments('-UNDEBUG', language : ['cpp'], native: true)
		add_project_arguments('-UNDEBUG', language : ['cpp'], native: false)
	else
		# Disable asserts
		message('assert() is disabled')
		add_project_arguments('-DNDEBUG', language : ['cpp'], native: true)
		add_project_arguments('-DNDEBUG', language : ['cpp'], native: false)
	endif
endif

if disable_rtti == true
	message('Building framework with RTTI disabled.')
	# These are project, not global, because libcxxabi must be built with RTTI.
	add_project_arguments('-fno-rtti', language : ['cpp'], native: true)
	add_project_arguments('-fno-rtti', language : ['cpp'], native: false)
else
	message('Building framework with RTTI enabled.')
endif

if disable_exceptions == true
	message('Building framework with exceptions disabled.')
	add_project_arguments(['-fno-exceptions', '-fno-unwind-tables'], language : ['cpp'], native: true)
	add_project_arguments(['-fno-exceptions', '-fno-unwind-tables'], language : ['cpp'], native: false)
else
	message('Building framework with exceptions enabled.')
endif

if enable_werror == true
	add_project_arguments('-Werror', language : ['cpp', 'c'], native: true)
	add_project_arguments('-Werror', language : ['cpp', 'c'], native: false)
endif

if enable_pedantic == true
	add_project_arguments('-pedantic', language : ['cpp', 'c'], native: true)
	add_project_arguments('-pedantic', language : ['cpp', 'c'], native: false)
else
	add_project_arguments('-Wno-pedantic', language : ['cpp', 'c'], native: true)
	add_project_arguments('-Wno-pedantic', language : ['cpp', 'c'], native: false)
endif

if enable_pedantic_error == true
	add_project_arguments('-pedantic-error', language : ['cpp', 'c'], native: true)
	add_project_arguments('-pedantic-error', language : ['cpp', 'c'], native: false)
endif

if enable_threading == false
	# This will stop the compiler from emiting __cxa_guard_acquire and __cxa_guard_release
	add_project_arguments('-fno-threadsafe-statics', language: ['cpp'], native: true)
	add_project_arguments('-fno-threadsafe-statics', language: ['cpp'], native: false)
endif

#######################
# Process Subprojects #
#######################

etl = subproject('etl')
libmemory = subproject('libmemory')
libc = subproject('libc')
libcpp = subproject('libcpp')
compiler_rt = subproject('compiler-rt')
microsoft_gsl = subproject('microsoft-gsl')

microsoft_gsl_dep = microsoft_gsl.get_variable('microsoft_gsl_dep')

libmemory_dep = libmemory.get_variable('libmemory_dep')
libmemory_native_dep = libmemory.get_variable('libmemory_native_dep')
libmemory_hosted_dep = libmemory.get_variable('libmemory_hosted_dep')
libmemory_hosted_native_dep = libmemory.get_variable('libmemory_hosted_native_dep')
libmemory_freelist_dep = libmemory.get_variable('libmemory_freelist_dep')
libmemory_threadx_dep = libmemory.get_variable('libmemory_threadx_dep')
libmemory_freertos_dep = libmemory.get_variable('libmemory_freertos_dep')
libmemory_header_include =  libmemory.get_variable('libmemory_system_includes')
libmemory_framework_rtos_dep = libmemory.get_variable('libmemory_framework_rtos_dep')

libc_dep = libc.get_variable('libc_dep')
printf_dep = libc.get_variable('printf_dep')
libc_native_dep = libc.get_variable('libc_native_dep')
libc_hosted_dep = libc.get_variable('libc_hosted_dep')
libc_hosted_native_dep = libc.get_variable('libc_hosted_native_dep')
libc_header_include = libc.get_variable('libc_header_include')
libc_native_header_include = libc.get_variable('libc_native_header_include')

libcxx_full_dep = libcpp.get_variable('libcxx_full_dep')
libcxx_full_native_dep = libcpp.get_variable('libcxx_full_native_dep')
libcxx_header_include_dep = libcpp.get_variable('libcxx_header_include_dep')
libcxx_native_header_include_dep = libcpp.get_variable('libcxx_native_header_include_dep')
libcxx_extensions_include_dir = libcpp.get_variable('libcxx_extensions_include_dir')

libcxxabi_dep = libcpp.get_variable('libcxxabi_dep')
libcxxabi_native_dep = libcpp.get_variable('libcxxabi_native_dep')

compiler_rt_builtins_dep = compiler_rt.get_variable('compiler_rt_builtins_dep')
compiler_rt_builtins_native_dep = compiler_rt.get_variable('compiler_rt_builtins_native_dep')

libc_hosted_native_partial_lib_dep = libc_hosted_native_dep.partial_dependency(links: true)
libc_hosted_native_partial_rest_dep = libc_hosted_native_dep.partial_dependency(compile_args : true, link_args : true, includes : true, sources : true)
libcxx_full_native_partial_lib_dep = libcxx_full_native_dep.partial_dependency(links: true)
libcxx_full_native_partial_rest_dep = libcxx_full_native_dep.partial_dependency(compile_args : true, link_args : true, includes : true, sources : true)
libcxxabi_native_partial_lib_dep = libcxxabi_native_dep.partial_dependency(links: true)
libcxxabi_native_partial_rest_dep = libcxxabi_native_dep.partial_dependency(compile_args : true, link_args : true, includes : true, sources : true)

if host_machine.cpu_family() == 'x86_64'
	chosen_libc_host_dep = libc_hosted_dep
else
	chosen_libc_host_dep = libc_dep
endif

libc_partial_lib_dep = chosen_libc_host_dep.partial_dependency(links: true)
libc_partial_rest_dep = chosen_libc_host_dep.partial_dependency(compile_args : true, link_args : true, includes : true, sources : true)
libcxx_full_partial_lib_dep = libcxx_full_dep.partial_dependency(links: true)
libcxx_full_partial_rest_dep = libcxx_full_dep.partial_dependency(compile_args : true, link_args : true, includes : true, sources : true)
libcxxabi_partial_lib_dep = libcxxabi_dep.partial_dependency(links: true)
libcxxabi_partial_rest_dep = libcxxabi_dep.partial_dependency(compile_args : true, link_args : true, includes : true, sources : true)

stdlib_native_dep = declare_dependency(
	dependencies: [
		libc_hosted_native_partial_rest_dep,
		libcxx_full_native_partial_rest_dep,
		libcxx_full_native_partial_lib_dep,
		libcxxabi_native_dep,
		libmemory_hosted_native_dep,
		libc_hosted_native_partial_lib_dep
	],
)

stdlib_host_dep = declare_dependency(
	dependencies: [
		libc_partial_rest_dep,
		libcxx_full_partial_rest_dep,
		libcxx_full_partial_lib_dep,
		libcxxabi_dep,
		libmemory_hosted_dep,
		libc_partial_lib_dep
	],
)

# Silence the warning when -nostdinc and -nostdinc++ are specified together
add_project_arguments(
	meson.get_compiler('cpp', native : true).get_supported_arguments('-Wno-unused-command-line-argument'),
	language: ['c', 'cpp'],
	native: true)
add_project_arguments(
	meson.get_compiler('cpp', native : false).get_supported_arguments('-Wno-unused-command-line-argument'),
	language: ['c', 'cpp'])

##########################
# Framework Dependencies #
##########################

inc_framework = [
  ## TODO: use dependency
  include_directories('subprojects/etl/include', is_system: true),
  ## TODO: use dependency
  include_directories('subprojects/GSL-3.1.0/include', is_system: true),
  libcxx_extensions_include_dir
]

#######################
# Process source tree #
#######################s

subdir('src')

############################
# Supporting Build Targets #
############################

run_target('docs',
	command: ['tools/doxygen.sh', target_architecture])

run_target('complexity',
	command: ['tools/complexity_check.sh', '-w'])

run_target('complexity-list',
	command: ['tools/complexity_check.sh'])

run_target('cppcheck',
	command: ['tools/cppcheck.sh']
)

run_target('cppcheck-xml',
	command: ['tools/cppcheck_xml.sh']
)

vale = find_program('vale', required: false)
if vale.found()
	run_target('doclint',
		command: ['vale',
		'--config',
		meson.source_root() + '/tools/vale-styleguide/config/documentation.vale.ini',
		'--glob',
		'*.md',
		meson.source_root() + '/docs/',
		meson.source_root() + '/README.md']
	)
endif

clangtidy = find_program('clang-tidy', required: false)
if clangtidy.found()
    run_target(
        'tidy',
        command: [
            'build/tooling/clang-tidy/clang-tidy.sh',
            # Checks
            '-*,cppcoreguidelines-*,modernize-*,performance-*,portability-*,' +
            'readability-*,' +
            # Checks to Remove
            '-modernize-use-trailing-return-type,'+
           	'-readability-inconsistent-declaration-parameter-name,' +
           	'-cppcoreguidelines-pro-bounds-array-to-pointer-decay,' +
           	'-cppcoreguidelines-special-member-functions,' +
           	'-cppcoreguidelines-pro-type-vararg,' + # We use printf
           	'-cppcoreguidelines-pro-type-reinterpret-cast,' + # We use reinterpret_cast
           	'-cppcoreguidelines-pro-bounds-pointer-arithmetic,' + # So much embedded code uses pointer arithmetic
           	'-readability-braces-around-statements,', # This is returning so many false positives because we put them on a newline
           	# Options
			# 'cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor=1',
            # Header Filter
            '.*,-vl53l1x_registers.h',
            #Finish with files or other arguments
            #'-line-filter=[{"name":"ring_span.hpp","lines":[[1,1]]}]' # Ring-span is not our header,
            # Files to lint
            framework_lint_files
        ]
    )
endif
